#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Mon Oct  7 16:30:26 2019
#

import phototags
import logging, os, sys, threading, wx
import wx.grid as gridlib

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainWindow(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MainWindow.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((694, 609))
		self.SetTitle("Phototags")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("C:\\Users\\mgering\\photo-utils\\app-icon.jpg", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		
		self.frame_statusbar = self.CreateStatusBar(1)
		self.frame_statusbar.SetStatusWidths([-1])
		# statusbar fields
		frame_statusbar_fields = ["frame_statusbar"]
		for i in range(len(frame_statusbar_fields)):
			self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
		
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=wx.NB_BOTTOM)
		sizer_2.Add(self.notebook_1, 1, wx.EXPAND, 0)
		
		self.options_page = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.options_page.SetToolTip("Show/edit processing options")
		self.notebook_1.AddPage(self.options_page, "Options")
		
		sizer_3 = wx.BoxSizer(wx.VERTICAL)
		
		self.checkbox_check_allowed = wx.CheckBox(self.options_page, wx.ID_ANY, "Check allowed")
		self.checkbox_check_allowed.SetValue(1)
		self.checkbox_check_allowed.arg_name = "check_allowed"
		sizer_3.Add(self.checkbox_check_allowed, 0, wx.LEFT, 15)
		
		self.checkbox_check_required = wx.CheckBox(self.options_page, wx.ID_ANY, "Check required")
		self.checkbox_check_required.SetValue(1)
		self.checkbox_check_required.arg_name = "check_required"
		sizer_3.Add(self.checkbox_check_required, 0, wx.LEFT, 15)
		
		self.checkbox_check_frequency = wx.CheckBox(self.options_page, wx.ID_ANY, "Check frequency")
		self.checkbox_check_frequency.arg_name = "frequency"
		sizer_3.Add(self.checkbox_check_frequency, 0, wx.LEFT, 15)
		
		self.checkbox_file_tags = wx.CheckBox(self.options_page, wx.ID_ANY, "File tags")
		self.checkbox_file_tags.SetValue(1)
		self.checkbox_file_tags.arg_name = "print_file_tags"
		sizer_3.Add(self.checkbox_file_tags, 0, wx.LEFT, 15)
		
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3.Add(sizer_5, 0, wx.LEFT, 15)
		
		self.text_ctrl_max_files = wx.TextCtrl(self.options_page, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_PROCESS_TAB)
		self.text_ctrl_max_files.SetToolTip("Maximum number of files to process (or 'All')")
		self.text_ctrl_max_files.arg_name = "max_files"
		sizer_5.Add(self.text_ctrl_max_files, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		
		static_text_max_files = wx.StaticText(self.options_page, wx.ID_ANY, "Max files")
		sizer_5.Add(static_text_max_files, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 15)
		
		sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.options_page, wx.ID_ANY, "Target"), wx.HORIZONTAL)
		sizer_3.Add(sizer_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 15)
		
		self.text_ctrl_target = wx.TextCtrl(self.options_page, wx.ID_ANY, "")
		self.text_ctrl_target.arg_name = "targ_arg"
		sizer_6.Add(self.text_ctrl_target, 1, wx.EXPAND, 0)
		
		self.button_select_target = wx.Button(self.options_page, wx.ID_ANY, "Select")
		sizer_6.Add(self.button_select_target, 0, wx.LEFT, 15)
		
		sizer_3.Add((20, 20), 0, 0, 0)
		
		sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3.Add(sizer_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 15)
		
		self.apply_options_button = wx.Button(self.options_page, wx.ID_ANY, "Apply")
		self.apply_options_button.Enable(False)
		sizer_4.Add(self.apply_options_button, 0, wx.RIGHT, 10)
		
		self.revert_options_button = wx.Button(self.options_page, wx.ID_ANY, "Revert")
		self.revert_options_button.Enable(False)
		sizer_4.Add(self.revert_options_button, 0, wx.RIGHT, 10)
		
		sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.options_page, wx.ID_ANY, "Processing"), wx.HORIZONTAL)
		sizer_3.Add(sizer_7, 0, wx.LEFT | wx.TOP, 15)
		
		self.button_start = wx.Button(self.options_page, wx.ID_ANY, "Start")
		sizer_7.Add(self.button_start, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)
		
		self.button_stop = wx.Button(self.options_page, wx.ID_ANY, "Stop")
		self.button_stop.Enable(False)
		sizer_7.Add(self.button_stop, 0, wx.RIGHT | wx.TOP, 10)
		
		self.notebook_1_Tags = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.notebook_1_Tags.SetToolTip("Show tags used by individual files")
		self.notebook_1.AddPage(self.notebook_1_Tags, "Tags")
		
		sizer_8 = wx.BoxSizer(wx.VERTICAL)
		
		self.static_text_tags_header = wx.StaticText(self.notebook_1_Tags, wx.ID_ANY, "Not yet set\n", style=wx.ALIGN_CENTER)
		self.static_text_tags_header.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		sizer_8.Add(self.static_text_tags_header, 0, wx.ALL, 15)
		
		self.grid_tags = wx.grid.Grid(self.notebook_1_Tags, wx.ID_ANY, size=(1, 1))
		self.grid_tags.CreateGrid(10, 2)
		self.grid_tags.SetSelectionMode(wx.grid.Grid.SelectRows)
		self.grid_tags.SetColLabelValue(0, "Filename")
		self.grid_tags.SetColLabelValue(1, "All Tags")
		sizer_8.Add(self.grid_tags, 1, wx.ALL | wx.EXPAND, 15)
		
		self.notebook_1_Missing = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.notebook_1.AddPage(self.notebook_1_Missing, "Missing")
		
		self.notebook_1_Disallowed = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.notebook_1.AddPage(self.notebook_1_Disallowed, "Disallowed")
		
		self.notebook_1_Frequency = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.notebook_1.AddPage(self.notebook_1_Frequency, "Frequency")
		
		self.notebook_1_logs = wx.ScrolledWindow(self.notebook_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.notebook_1_logs.Enable(False)
		self.notebook_1_logs.SetScrollRate(10, 10)
		self.notebook_1.AddPage(self.notebook_1_logs, "Logs")
		
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		
		self.log_text_ctrl = wx.TextCtrl(self.notebook_1_logs, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
		sizer_1.Add(self.log_text_ctrl, 1, wx.ALL | wx.EXPAND, 15)
		
		self.notebook_1_logs.SetSizer(sizer_1)
		
		self.notebook_1_Tags.SetSizer(sizer_8)
		
		self.options_page.SetSizer(sizer_3)
		
		self.SetSizer(sizer_2)
		
		self.Layout()

		self.Bind(wx.EVT_CHECKBOX, self.on_options_event, self.checkbox_check_allowed)
		self.Bind(wx.EVT_CHECKBOX, self.on_options_event, self.checkbox_check_required)
		self.Bind(wx.EVT_CHECKBOX, self.on_options_event, self.checkbox_check_frequency)
		self.Bind(wx.EVT_CHECKBOX, self.on_options_event, self.checkbox_file_tags)
		self.Bind(wx.EVT_TEXT, self.on_options_event, self.text_ctrl_max_files)
		self.Bind(wx.EVT_TEXT, self.on_options_event, self.text_ctrl_target)
		self.Bind(wx.EVT_BUTTON, self.on_apply_options, self.apply_options_button)
		self.Bind(wx.EVT_BUTTON, self.on_revert_options, self.revert_options_button)
		self.Bind(wx.EVT_BUTTON, self.on_start_button, self.button_start)
		self.Bind(wx.EVT_BUTTON, self.on_stop_button, self.button_stop)
		# end wxGlade
		try:
			# redirect text here
			redir=RedirectText(self.log_text_ctrl, threading.current_thread().ident)
			sys.stdout = redir
			sys.stderr = redir
			self.workerThread = None
			self.guiThreadId = threading.current_thread().ident
			self.args = self.parseArgs()
			self.update_options()
			self.config = phototags.PhotoTagsConfig()
			self.config.read_config(self.args.config)
			self.reset_results()
			self.set_button_states()
		except Exception as exc:
			self.GetStatusBar().SetStatusText("Error: "+str(exc))
		print("App starting")


	def __set_properties(self):
		pass #TODO: FIX THIS

	def __do_layout(self):
		pass #TODO: FIX THIS

	def on_target(self, event):  # wxGlade: MainWindow.<event_handler>
		print("Event handler 'on_target' not implemented!")
		event.Skip()

	def on_tags(self, event):  # wxGlade: MainWindow.<event_handler>
		print("Event handler 'on_tags' not implemented!")
		event.Skip()

	def on_log(self, event):  # wxGlade: MainWindow.<event_handler>
		print("Event handler 'on_log' not implemented!")
		event.Skip()

	def parseArgs(self):
		parser = phototags.initArgParser()
		parser.add_argument('--target', default=".", dest='targ_arg', help="File or directory to check")
		return parser.parse_args()

	def options_ok(self):
		return self.max_files_ok() and self.target_ok()

	def lose_focus_max_files(self):
		pass

	def max_files_ok(self):
		val_str = self.text_ctrl_max_files.GetValue().strip()
		if len(val_str) > 0 and val_str.lower() != "all":
			try:
				val = int(val_str)
			except Exception as exc:
				return False
		return True

	def target_ok(self):
		target = self.text_ctrl_target.GetValue().strip()
		return os.path.isdir(target) or os.path.isfile(target)

	def on_apply_options(self, event):  # wxGlade: MainWindow.<event_handler>
		page = self.options_page.GetChildren()
		option_controls = [c for c in self.options_page.GetChildren() if hasattr(c, "arg_name")]
		# Check validity of some fields
		errors = 0
		for i in option_controls:
			arg_name = getattr(i, "arg_name")
			if arg_name == "max_files":
				if not self.max_files_ok():
					val_str = i.GetValue()
					msg = wx.MessageDialog(self, "Illegal value \"%s\". Use \"All\" or a positive number." % (val_str), "Max Files Error")
					msg.ShowModal()
					errors += 1
			elif arg_name == "targ_arg":
				val_str = i.GetValue().strip()
				if not self.target_ok():
					msg = wx.MessageDialog(self, "\"%s\" is not a file or directory." % (val_str), "Target Error")
					msg.ShowModal()
					errors += 1
		# If no errors then apply the control values to the args object
		if errors == 0:
			for i in option_controls:
				if hasattr(i, "arg_name"):
					arg_name = getattr(i, "arg_name")
					if arg_name == "max_files":
						val = -1
						val_str = i.GetValue().strip()
						if len(val_str) > 0 and val_str.lower() != "all":
							val = int(val_str)
						setattr(self.args, arg_name, val)
					elif arg_name == "targ_arg":
						self.args.targ_arg = i.GetValue().strip()
					else:
						setattr(self.args, arg_name, bool(i.GetValue()))
			self.options_modified = False
			self.set_button_states()

	def on_revert_options(self, event):  # wxGlade: MainWindow.<event_handler>
		self.update_options()
		self.options_modified = False
		
	def on_options_event(self, event):  # wxGlade: MainWindow.<event_handler>
		self.options_modified = True
		self.set_button_states()

	def update_options(self):
		page = self.options_page.GetChildren()
		for i in page:
			if hasattr(i, "arg_name"):
				arg_name = getattr(i, "arg_name")
				arg_value = getattr(self.args, arg_name)
				if arg_name == "max_files":
					str_value = str(arg_value)
					if arg_value < 0:
						str_value = "All"
					i.ChangeValue(str_value)
				elif isinstance(i, wx.TextCtrl):
					i.ChangeValue(arg_value)
				else:
					i.SetValue(arg_value)
		self.options_modified = False

	def on_start_button(self, event):  # wxGlade: MainWindow.<event_handler>
		self.StatusBar.SetStatusText("Starting to process images...")
		self.reset_results()
		self.workerThread = PhotoTagsThread(self.processCallback, self.args, self.args.targ_arg, self.config)
		self.workerThread.start()

	def reset_results(self):
		self.tag_info = []
		self.fileCount = 0
		self.filename = None
		self.static_text_tags_header.SetLabelText("No results yet")
		self.grid_tags.Hide()
		#Reset tag info
		#Reset missing info
		#Reset disallowed info
		#Reset Frequency info
		pass #TODO: FIX THIS

	def set_button_states(self):
		options_ok = self.options_ok()
		apply_revert = self.options_modified
		start = options_ok and not self.options_modified and \
				(self.workerThread is None or \
				self.workerThread.done)
		stop = self.workerThread is not None and \
				not self.workerThread.done

		self.apply_options_button.Enable(apply_revert)
		self.revert_options_button.Enable(apply_revert)
		self.button_start.Enable(start)
		self.button_stop.Enable(stop)

	def update_results(self):
		self.update_tag_page()
		pass #TODO: FIX THIS

	def update_tag_page(self):
		if self.options_modified:
			self.static_text_tags_header.SetLabelText("Options were modified; results are not valid.")
			self.grid_tags.Hide()
		elif not self.args.print_file_tags:
			self.static_text_tags_header.SetLabelText("Options did not include \"file tags\"")
			self.grid_tags.Hide()
		else:
			row_num = 0
			for row in self.tag_info:
				self.grid_tags.SetCellValue(row_num, 0, row[0])
				self.grid_tags.SetCellValue(row_num, 1, ", ".join(row[1]))
				attr = gridlib.GridCellAttr()
				attr.SetReadOnly(True)
				self.grid_tags.SetRowAttr(row_num, attr)
				row_num += 1
			self.static_text_tags_header.SetLabelText("Tags Per File")
			self.grid_tags.Show()



	def processCallback(self, callbackName, callbackData):
		if callbackName == "tags":
			self.fileCount += 1
			filename = callbackData["filename"]
			tags = callbackData["tags"]
			self.tag_info.append((filename, tags, callbackData["missingTags"], callbackData["badTags"]))
			self.StatusBar.SetStatusText("%s: %s: %s" % (self.fileCount, filename, ", ".join(tags)))
		elif callbackName == "done":
			self.errorCount = callbackData["errorCount"]
			status = "Done"
			if callbackData["wasStopped"]:
				status = "Stopped"
			self.StatusBar.SetStatusText("Files: %s; %s - total errors: %s" % (self.fileCount, status, self.errorCount))
			self.workerThread.done = True
			self.update_results()
		else:
			logging.getLogger().error("Unknown callback name %s", callbackName)
			self.StatusBar.SetStatusText("Error: Unknown callback name %s" % (callbackName))

	def on_stop_button(self, event):  # wxGlade: MainWindow.<event_handler>
		print("Event handler 'on_stop_button' not implemented!")
		event.Skip()
# end of class MainWindow

class Phototags(wx.App):
	def OnInit(self):
		self.frame = MainWindow(None, wx.ID_ANY, "")
		self.SetTopWindow(self.frame)
		self.frame.Show()
		return True


class PhotoTagsThread(threading.Thread):
	def __init__(self, callback, args, target, config):
		super().__init__()
		self.callback = callback
		self.config = config
		self.errorCount = 0
		self.args = args
		self.target = target
		self.stopping = False
		self.done = False

	def run(self):
		self.photo_tags = phototags.PhotoTags(target_required=False, callback=self.callback, args=self.args, 
					tags_allowed=self.config.tags_allowed, tags_required=self.config.tags_required)
		if self.args.debug:
			self.photo_tags.logger.setLevel(logging.DEBUG)
		self.errorCount = self.photo_tags.process_target(self.target)
		self.done = True

	def stop(self):
		self.photo_tags.stop_processing()
		self.stopping = True

# end of class Phototags

class RedirectText(object):
	def __init__(self, aWxTextCtrl, guiThreadId):
		self.out=aWxTextCtrl
		self.guiThreadId = guiThreadId

	def write(self, string):
		threadId = threading.current_thread().ident
		if self.guiThreadId == threadId:
			self.out.WriteText(string)
		else:
			wx.CallAfter(self.out.WriteText, string)

if __name__ == "__main__":
	myApp = Phototags(0)
	myApp.MainLoop()
