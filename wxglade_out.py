#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.9pre on Wed Oct 23 10:37:11 2019
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((898, 648))
        self.SetTitle("frame")
        
        self.sizer_1 = wx.BoxSizer(wx.VERTICAL)
        
        self.button_1 = wx.Button(self, wx.ID_ANY, "Press Me")
        self.sizer_1.Add(self.button_1, 0, 0, 0)
        
        self.panel_1 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_1.SetBackgroundColour(wx.Colour(231, 242, 120))
        self.panel_1.SetScrollRate(10, 10)
        self.sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        
        self.sizer_7 = wx.BoxSizer(wx.VERTICAL)
        
        self.sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "dups 1"), wx.HORIZONTAL)
        self.sizer_7.Add(self.sizer_4, 0, wx.ALL, 0)
        
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_4.Add(sizer_5, 0, wx.ALL, 5)
        
        bitmap_2 = wx.StaticBitmap(self.panel_1, wx.ID_ANY, wx.Bitmap("C:\\Users\\mgering\\photo-utils\\images\\road-trip.jpg", wx.BITMAP_TYPE_ANY), style=wx.BORDER_SIMPLE)
        sizer_5.Add(bitmap_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        static_text_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "static_text_2")
        sizer_5.Add(static_text_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        self.checkbox_2 = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        sizer_5.Add(self.checkbox_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_4.Add(sizer_6, 0, wx.ALL, 5)
        
        bitmap_3 = wx.StaticBitmap(self.panel_1, wx.ID_ANY, wx.Bitmap("C:\\Users\\mgering\\photo-utils\\images\\road-trip.jpg", wx.BITMAP_TYPE_ANY), style=wx.BORDER_SIMPLE)
        sizer_6.Add(bitmap_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        static_text_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "static_text_3")
        sizer_6.Add(static_text_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        self.checkbox_3 = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        sizer_6.Add(self.checkbox_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        self.sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "dups 2"), wx.HORIZONTAL)
        self.sizer_7.Add(self.sizer_3, 0, wx.ALL, 5)
        
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_3.Add(sizer_2, 1, wx.ALL, 0)
        
        bitmap_1 = wx.StaticBitmap(self.panel_1, wx.ID_ANY, wx.Bitmap("C:\\Users\\mgering\\photo-utils\\images\\road-trip.jpg", wx.BITMAP_TYPE_ANY), style=wx.BORDER_SIMPLE)
        sizer_2.Add(bitmap_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        static_text_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "static_text_1")
        sizer_2.Add(static_text_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        self.checkbox_1 = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        sizer_2.Add(self.checkbox_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        self.panel_1.SetSizer(self.sizer_7)
        
        self.SetSizer(self.sizer_1)
        
        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_button, self.button_1)
        # end wxGlade
        bm = wx.Bitmap("images-dedup/don-elaine.jpg")
        sz = bm.GetSize()
        r = ( 200.0 / sz.width)
        w_n = int(sz.width * r) 
        h_n = int(sz.height * r)
        im = bm.ConvertToImage()
        im2 = im.Scale(w_n, h_n)
        
        bitmap_1.SetBitmap(wx.Bitmap(im2))

    def on_button(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_button' not implemented!")
        event.Skip()
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
